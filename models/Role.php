<?php

namespace app\models;

use app\models\RoleFunctionRole;
use app\models\RoleFunction;
use Yii;

/**
 * This is the model class for table "role".
 *
 * @property int $id
 * @property string $name
 *
 * @property RoleFunctionRole[] $roleFunctionRoles
 * @property User[] $users
 */
class Role extends \yii\db\ActiveRecord
{
    public $functions;
    public $role_id;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'role';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['functions', 'role_id'], 'safe'],
            [['name'], 'string', 'max' => 1000],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
        ];
    }

    /**
     * Gets query for [[RoleFunctionRoles]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRoleFunctionRoles()
    {
        return $this->hasMany(RoleFunctionRole::class, ['role_id' => 'id']);
    }

    /**
     * Gets query for [[Users]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUsers()
    {
        return $this->hasMany(User::class, ['role_id' => 'id']);
    }

    public function getFunctions()
    {
        $funcs = RoleFunctionRole::find()->where(['role_id' => $this->id])->all();
        $result = [];
        foreach ($funcs as $func)
            $result[] = $func->role_function_id;

        return $result;
    }

    public function getAllow()
    {
        $result = "";
        $allows = RoleFunctionRole::find()->where(['role_id' => $this->id])->all();
        foreach ($allows as $allow)
            $result .= '<i class="bi bi-check-circle-fill" style="font-size: 1rem; color: #28a745;"></i> '.$allow->roleFunction->name.'<br>';

        return $result;
    }

    public function getDeny()
    {
        $result = "";
        $allows = RoleFunctionRole::find()->where(['role_id' => $this->id])->all();
        $functions = RoleFunction::find()->all();
        $flag = false;
        for ($i = 0; $i < count($functions); $i++)
        {
            for ($j = 0; $j < count($allows); $j++)
                if ($functions[$i]->id == $allows[$j]->role_function_id)
                    $flag = true;
            if (!$flag)
                $result .= '<i class="bi bi-x-circle-fill" style="font-size: 1rem; color: #dc3545;"></i> '.$functions[$i]->name.'<br>';
            $flag = false;
        }

        return $result;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $funcs = RoleFunctionRole::find()->where(['role_id' => $this->id])->all();
        foreach ($funcs as $func)
            $func->delete();

        if($this->functions !== '')
            foreach ($this->functions as $function)
            {
                $func = RoleFunctionRole::find()->where(['role_id' => $this->id])->andWhere(['role_function_id' => $function])->one();
                if ($func == null) $func = new RoleFunctionRole();
                $func->role_id = $this->id;
                $func->role_function_id = $function;
                $func->save();

            }
    }

    public function beforeDelete()
    {
        $funcs = RoleFunctionRole::find()->where(['role_id' => $this->id])->all();
        foreach ($funcs as $func)
            $func->delete();

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
